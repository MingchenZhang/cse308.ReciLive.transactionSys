<html>
<head>
    <script src="static/javascript/jquery-3.1.1.js"></script>
    <script src="static/javascript/resampler.js"></script>
    <script src="static/javascript/Queue.src.js"></script>
</head>
<body>
<div id="list">

</div>
<script>

    var AudioContext = window.AudioContext || window.webkitAudioContext;
    var audioCtx = new AudioContext();
    sourceSampleRate = parseInt(prompt("Please enter sourceSampleRate", "48000"));
    destSampleRate = audioCtx.sampleRate;
    transmitionRate = 22000;
    consumeRate = 16384;
    appendByte = destSampleRate/sourceSampleRate*consumeRate;
    console.log('sample rate: '+audioCtx.sampleRate);
    $('#list').prepend('<p>sample rate: '+audioCtx.sampleRate+'</p>');
    var resampler = new Resampler(transmitionRate, destSampleRate, 1, Math.ceil(appendByte));

    var pageCount = 0;

    function createWebSocket(path) {
        var protocolPrefix = (window.location.protocol === 'https:') ? 'wss:' : 'ws:';
        return new WebSocket(protocolPrefix + '//' + location.host + path, 'echo-protocol');
    }
    var ws = createWebSocket(location.pathname);
    ws.binaryType = "arraybuffer";

    var audioBuffer = new Queue();

    ws.addEventListener("message", function(e) {
        console.log('received length: '+e.data.byteLength);
        var appendByte_c = Math.ceil(appendByte);
        var array = new Float32Array(e.data);
        var array = resampler.resampler(array, appendByte_c);
        for(var i = 0; i<appendByte_c; i++){
            audioBuffer.enqueue(array[i]);
        }
    });


    if (!navigator.getUserMedia)
        navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia ||
                navigator.mozGetUserMedia || navigator.msGetUserMedia;

    if (navigator.getUserMedia) {
        navigator.getUserMedia({audio: true},
                function(stream) {
                    start_microphone(stream);
                },
                function(e) {
                    alert('Error capturing audio.');
                }
        );
    } else {
        alert('getUserMedia not supported in this browser.');
    }



    function start_microphone(stream) {
        var microphone_stream = audioCtx.createMediaStreamSource(stream);
        //microphone_stream.connect(audioCtx.destination);
        var scriptProc = logStream(audioCtx);
        microphone_stream.connect(scriptProc);
        scriptProc.connect(audioCtx.destination);
        //scriptProc.connect(audioCtx.createMediaStreamDestination());
    }

    function logStream(audioCtx) {
        var script_processor_node = audioCtx.createScriptProcessor(consumeRate, 1, 1);
        script_processor_node.onaudioprocess = function(audioProcessingEvent) {
            // The input buffer is the song we loaded earlier
            var inputBuffer = audioProcessingEvent.inputBuffer;

            // The output buffer contains the samples that will be modified and played
            var outputBuffer = audioProcessingEvent.outputBuffer;

            // var inputData = inputBuffer.getChannelData(channel);
            var outputData = outputBuffer.getChannelData(0);

            var bufferLength = audioBuffer.getLength();
            if(bufferLength > destSampleRate*2){
                audioBuffer.empty();
                console.log('lag cleared');
                $('#list').prepend('<p>lag cleared</p>');
            } else if(bufferLength > consumeRate){
                var temp = undefined;
                for(var i=0; i<consumeRate; i++){
                    temp = audioBuffer.dequeue();
                    outputData[i] = temp;
                }
                console.log(temp);
                $('#list').prepend('<p>'+temp+'</p>');
            }else{
                console.log('lag');
                $('#list').prepend('<p>lag</p>');
            }

            pageCount++;
            if(pageCount > 100){
                $('#list').empty();
                pageCount = 0;
            }
        };
        return script_processor_node;
    }
</script>
</body>
</html>