<html>

<head>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>ReciLive</title>
    <link rel="icon" type="image/png" sizes="96x96" href="../static/img/logo/favicon-96x96.png">
    <!-- CSS Library -->
    <link href="/static/css/library/bootstrap.min.css" rel="stylesheet" type="text/css">
    <link href="/static/css/library/font-awesome-4.7.0/css/font-awesome.min.css" rel="stylesheet" type="text/css">
    <!-- JS Library -->
    <script src="/static/javascript/jquery-3.1.1.js"></script>
    <script src="../static/javascript/bootstrap.min.js"></script>
    <!-- Our CSS -->
    <link href="../static/css/live.css" rel="stylesheet" type="text/css">

    <!--<script src="/static/javascript/bluebird.js"></script>-->
    <script src="/static/javascript/timeline.js"></script>
    <script src="/static/javascript/vex.combined.min.js"></script>
    <link href="/static/css/library/vex.css" rel="stylesheet" type="text/css">
    <link href="/static/css/library/vex-theme-default.css" rel="stylesheet" type="text/css">
    <script>vex.defaultOptions.className = 'vex-theme-default'</script>

    <script src="/static/javascript/transaction_system.js"></script>
    <script src="/static/javascript/module/chat_module.js"></script>
    <script src="/static/javascript/module/slide_module.js"></script>
    <script src="/static/javascript/module/sound_control_module.js"></script>
    <script src="/static/javascript/sound_system.js"></script>
    <script src="/static/javascript/resampler.js"></script>
    <script src="/static/javascript/Queue.src.js"></script>
    <script src="/static/javascript/canvas_controller.js"></script>
    <script src="/static/javascript/view_manager.js"></script>
</head>

<body>
<nav class="navbar">
    <img src="../static/img/closed.png" class="rec-ended-notification">
    <div class="container-fluid">
        <div class="navbar-header">
            <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
            </button>
            <img src="../static/img/logo/android-icon-48x48.png">
        </div>
        <div class="collapse navbar-collapse">
            <ul class="nav navbar-nav navbar-right">
                <li><a href="#"><%= username %></a></li>
                <li><a href="#">Log In</a></li>
            </ul>
        </div>
    </div>
</nav>
<div class="container-fluid">
    <div class="row">
        <div class="col-md-1 side-bar">
            <span class="fa fa-backward fa-2x student-list"></span>
            <span class="fa fa-hand-paper-o fa-2x microphone"></span>
            <span class="fa fa-comments fa-2x chat"></span>
            <span class="fa fa-pencil fa-2x daw"></span>
            <span class="fa fa-undo fa-2x undo"></span>
            <span class="fa fa-repeat fa-2x redo"></span>
            <span class="fa fa-eraser fa-2x eraser"></span>
            <span class="fa fa-area-chart fa-2x quiz"></span>
            <span class="fa fa-download fa-2x download"></span>
        </div>
        <div class="col-md-6" id="slide-stage">
            <div id="img-div"></div>
            <div id="canvas-div"></div>
            <div class="slide-nav">
                <label id="previous-slide" class="slide-prev">&#x2039;</label>
                <label id="next-slide" class="slide-next">&#x203a;</label>
            </div>
            <div id='slider-div' class="slider">
                <input class="slider__range" type="range" value="100" min="0" step="0.000001" max="100">
            </div>
        </div>
        <div class="col-md-4" id="info-board">
            <input type="text" name="text" id="send"></input>
            <button class="add-message" type="button" id="submit">+</button>
        </div>
    </div>
</div>

<script>
    eventRate = 2048;

    function createEventConstructor(type){
        var func = function (option) {
            var event = new Event(type);
            return Object.assign(event, option);
        };
        func.type = type;
        return func;
    }
    events = {
        startRecitation: createEventConstructor('startRecitation'),
        disconnected: createEventConstructor('disconnected'),
        endRecitation: createEventConstructor('endRecitation'),
        switchToPlayBack: createEventConstructor('switchToPlayBack'),
        switchToLive: createEventConstructor('switchToLive'),
        workAreaRatioChange: createEventConstructor('workAreaRatioChange'),
    };

    audioCtx = new AudioContext();
    soundSystem = new SoundSystem("/room/<%= classroomNumber %>/sound", audioCtx.sampleRate, eventRate);;

    transactionSystem = new TransactionSystem("/room/<%= classroomNumber %>/transaction");
    transactionSystem.roomNumber = parseInt('<%= classroomNumber %>');
    transactionSystem.userID = parseInt("<%= userID %>");
    soundControlSystem = new SoundControl(transactionSystem);
    chatModule = new Chat(transactionSystem, $('#info-board'), $('#submit'), $('#send'));
    slideModule = new Slide(transactionSystem, $('#img-div'), $('#previous-slide'), $('#next-slide'));
    transactionSystem.registerModule(chatModule.moduleName, chatModule);
    transactionSystem.registerModule(slideModule.moduleName, slideModule);
    transactionSystem.registerModule(soundControlSystem.moduleName, soundControlSystem);
    canvasController = new canvasontroller($('#CursorLayer'));
    sliderController = new replayController(soundSystem,transactionSystem, $('.slider__range'));
    viewManager = new view($('#slide-stage'));
    var loadingDialog;
    var prestartDialog;
    loadingDialog = vex.dialog.open({
        message: 'page loading...',
        buttons: [],
        overlayClosesOnClick: false
    });
    $.ajax({
        url: window.location.href + '/my_privilege',
        type: 'get',
        dataType: 'json',
    }).then((result) => {
        if (result.status == 'ok') {
            transactionSystem.privilege = result.privilege;
        } else throw result;
    }).then(transactionSystem.init).then(function(){
        if(!transactionSystem.firstTransactionTime()){
            // no transaction posted
            return new Promise(function (resolve, reject) {
                if (transactionSystem.privilege.indexOf('admin') >= 0) {
                    // lecturer coming
                    prestartDialog = vex.dialog.open({
                        message: 'the class has not started yet',
                        buttons: [{
                            text: 'start class', type: 'button', className: 'vex-dialog-button-primary',
                            click: function() {
                                transactionSystem.startRecitation();
                            }
                        }],
                        overlayClosesOnClick: false,
                    });
                } else {
                    // student coming
                    prestartDialog = vex.dialog.open({
                        message: 'the class has not started yet',
                        buttons: [],
                        overlayClosesOnClick: false,
                    });
                }
                document.addEventListener(events.startRecitation.type, (e)=>{
                    resolve(e);
                    event.currentTarget.removeEventListener(event.type, cb);
                }, false);
            });
        }
    }).then(function (event) {
        if(prestartDialog) vex.close(prestartDialog);
    }).then(soundControlSystem.init).then(function (result) {
        slideModule.init();
        sliderController.init();
        viewManager.init();

        document.addEventListener(events.endRecitation.type, (e)=>{
            // if class has ended
            $(".rec-ended-notification").css("display","block");
            // show the ended image
        }, false);

        return activateSound();
    }).then(() => {
        if(loadingDialog) vex.close(loadingDialog);
        console.log('ready');
    });



    function activateSound() {
        return new Promise(function (resolve, reject) {
            if(!soundControlSystem.asSpeaker) return start_microphone();
            if (!navigator.getUserMedia)
                navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia ||
                    navigator.mozGetUserMedia || navigator.msGetUserMedia;
            if (navigator.getUserMedia) {
                navigator.getUserMedia({
                        audio: true
                    },
                    function (stream) {
                        start_microphone(stream);
                    },
                    function (e) {
                        alert('Error capturing audio.');
                        reject({reason: 'audio permission rejected'});
                    }
                );
            } else {
                alert('getUserMedia not supported in this browser.');
                reject({reason: 'getUserMedia not supported in this browser.'});
            }

            function start_microphone(stream) {
                console.log('native sample rate: ' + audioCtx.sampleRate);
                if (soundControlSystem.asListener) soundSystem.receiveFlag = true;
                soundSystem.connect();
                if(stream){
                    var microphone_stream = audioCtx.createMediaStreamSource(stream);
                    //microphone_stream.connect(audioCtx.destination);
                    var scriptProc = getAudioProc();
                    microphone_stream.connect(scriptProc);
                    scriptProc.connect(audioCtx.destination);
                    //scriptProc.connect(audioCtx.createMediaStreamDestination());
                }else{
                    var scriptProc = getAudioProc();
                    scriptProc.connect(audioCtx.destination);
                }
                return resolve();
            }

            function getAudioProc() {
                var script_processor_node = audioCtx.createScriptProcessor(eventRate, 1, 1);
                script_processor_node.onaudioprocess = function (audioProcessingEvent) {
                    var inputBuffer = audioProcessingEvent.inputBuffer;
                    var outputBuffer = audioProcessingEvent.outputBuffer;
                    var inputData = inputBuffer.getChannelData(0);
                    var outputData = outputBuffer.getChannelData(0);
                    if (soundControlSystem.asSpeaker)
                        soundSystem.send(inputData);
                    if (soundControlSystem.asListener)
                        soundSystem.writeNextSoundBuffer(outputData);
                };
                return script_processor_node;
            }
        });
    }
</script>
</body>
</html>
